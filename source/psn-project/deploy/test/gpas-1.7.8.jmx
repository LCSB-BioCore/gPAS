<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Testplan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="${__setProperty(https.default.protocol,TLSv1.2)}" elementType="Argument">
            <stringProp name="Argument.name">${__setProperty(https.default.protocol,TLSv1.2)}</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variablen (localhost)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBHOST" elementType="Argument">
            <stringProp name="Argument.name">DBHOST</stringProp>
            <stringProp name="Argument.value">192.168.56.104</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variablen (wildfly)" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">wildfly</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBHOST" elementType="Argument">
            <stringProp name="Argument.name">DBHOST</stringProp>
            <stringProp name="Argument.value">mysqldb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variablen (docker)" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">192.168.56.111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBHOST" elementType="Argument">
            <stringProp name="Argument.name">DBHOST</stringProp>
            <stringProp name="Argument.value">192.168.56.111</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="set default HTTP-Request" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${PORT}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="set variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="GPAS_CONTEXT" elementType="Argument">
            <stringProp name="Argument.name">GPAS_CONTEXT</stringProp>
            <stringProp name="Argument.value">gpas</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GPAS_DOMAINSERVICE" elementType="Argument">
            <stringProp name="Argument.name">GPAS_DOMAINSERVICE</stringProp>
            <stringProp name="Argument.value">DomainService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GPAS_SERVICE" elementType="Argument">
            <stringProp name="Argument.name">GPAS_SERVICE</stringProp>
            <stringProp name="Argument.value">gpasService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_DOMAIN" elementType="Argument">
            <stringProp name="Argument.name">TEST_DOMAIN</stringProp>
            <stringProp name="Argument.value">jmeter.test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_PREFIX" elementType="Argument">
            <stringProp name="Argument.name">TEST_PREFIX</stringProp>
            <stringProp name="Argument.value">jmeter_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_SUFFIX" elementType="Argument">
            <stringProp name="Argument.name">TEST_SUFFIX</stringProp>
            <stringProp name="Argument.value">_test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_VALUE_1" elementType="Argument">
            <stringProp name="Argument.name">TEST_VALUE_1</stringProp>
            <stringProp name="Argument.value">testeintrag-1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_VALUE_2" elementType="Argument">
            <stringProp name="Argument.name">TEST_VALUE_2</stringProp>
            <stringProp name="Argument.value">testeintrag-2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_VALUE_3" elementType="Argument">
            <stringProp name="Argument.name">TEST_VALUE_3</stringProp>
            <stringProp name="Argument.value">testeintrag-3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DB_URL" elementType="Argument">
            <stringProp name="Argument.name">DB_URL</stringProp>
            <stringProp name="Argument.value">jdbc:mysql://${DBHOST}:3306/gpas?useSSL=false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DB_DRIVER" elementType="Argument">
            <stringProp name="Argument.name">DB_DRIVER</stringProp>
            <stringProp name="Argument.value">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DB_USER" elementType="Argument">
            <stringProp name="Argument.name">DB_USER</stringProp>
            <stringProp name="Argument.value">gpas_user</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DB_PASS" elementType="Argument">
            <stringProp name="Argument.name">DB_PASS</stringProp>
            <stringProp name="Argument.value">gpas_2016</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="gPAS (v1.7.8)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Schleifen-Controller (Loop Controller)" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1464775585000</longProp>
        <longProp name="ThreadGroup.end_time">1464775585000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="gpas - web" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/gpas-web/html/app/index.xhtml</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="domainService" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="domainService - wsdl" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="wsdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata"></stringProp>
                  <boolProp name="HTTPArgument.use_equals">false</boolProp>
                  <stringProp name="Argument.name">wsdl</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (addDomain)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:addDomain&gt;
         &lt;domainDTO&gt;
            &lt;alphabet&gt;?&lt;/alphabet&gt;
            &lt;checkDigitClass&gt;?&lt;/checkDigitClass&gt;
            &lt;!--Optional:--&gt;
            &lt;comment&gt;?&lt;/comment&gt;
            &lt;domain&gt;?&lt;/domain&gt;
            &lt;!--Optional:--&gt;
            &lt;parentDomain&gt;?&lt;/parentDomain&gt;
            &lt;!--Optional:--&gt;
            &lt;properties&gt;?&lt;/properties&gt;
         &lt;/domainDTO&gt;
      &lt;/psn:addDomain&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="addDomain - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:addDomain&gt;
         &lt;domainDTO&gt;
            &lt;alphabet&gt;org.emau.icmvc.ganimed.ttp.psn.alphabets.Symbol31&lt;/alphabet&gt;
            &lt;checkDigitClass&gt;org.emau.icmvc.ganimed.ttp.psn.generator.ReedSolomonLagrange&lt;/checkDigitClass&gt;
            &lt;comment&gt;jMeter-Test&lt;/comment&gt;
            &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
            &lt;properties&gt;PSN_PREFIX=${TEST_PREFIX};PSN_SUFFIX=${TEST_SUFFIX};PSN_LENGTH=8;MAX_DETECTED_ERRORS=2;&lt;/properties&gt;
         &lt;/domainDTO&gt;
      &lt;/psn:addDomain&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/addDomainResponse</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="addDomain - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:addDomain&gt;
         &lt;domainDTO&gt;
            &lt;alphabet&gt;org.emau.icmvc.ganimed.ttp.psn.alphabets.Symbol31&lt;/alphabet&gt;
            &lt;checkDigitClass&gt;org.emau.icmvc.ganimed.ttp.psn.generator.ReedSolomonLagrange&lt;/checkDigitClass&gt;
            &lt;comment&gt;jMeter-Test&lt;/comment&gt;
            &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
            &lt;properties&gt;PSN_PREFIX=${TEST_PREFIX};PSN_SUFFIX=${TEST_SUFFIX};PSN_LENGTH=8;MAX_DETECTED_ERRORS=2;&lt;/properties&gt;
         &lt;/domainDTO&gt;
      &lt;/psn:addDomain&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath already exists" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;object for domain &apos;${TEST_DOMAIN}&apos; exists within cache&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getDomainLightObject)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainLightObject&gt;
         &lt;domain&gt;?&lt;/domain&gt;
      &lt;/psn:getDomainLightObject&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getDomainLightObject - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainLightObject&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:getDomainLightObject&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getDomainLightObjectResponse/return/domain=&quot;${TEST_DOMAIN}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getDomainLightObject - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainLightObject&gt;
         &lt;domain&gt;${TEST_DOMAIN}_does_not_exists&lt;/domain&gt;
      &lt;/psn:getDomainLightObject&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath does not exists" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;${TEST_DOMAIN}_does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getDomainObject)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainObject&gt;
         &lt;domain&gt;?&lt;/domain&gt;
      &lt;/psn:getDomainObject&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getDomainObject - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainObject&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:getDomainObject&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getDomainObjectResponse/return/domain=&quot;${TEST_DOMAIN}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getDomainObject - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainObject&gt;
         &lt;domain&gt;${TEST_DOMAIN}_does_not_exists&lt;/domain&gt;
      &lt;/psn:getDomainObject&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath does not exists" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;${TEST_DOMAIN}_does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getDomainsForPrefix)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainsForPrefix&gt;
         &lt;prefix&gt;?&lt;/prefix&gt;
      &lt;/psn:getDomainsForPrefix&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getDomainsForPrefix - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainsForPrefix&gt;
         &lt;prefix&gt;${TEST_PREFIX}&lt;/prefix&gt;
      &lt;/psn:getDomainsForPrefix&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getDomainsForPrefixResponse/return/domain=&quot;${TEST_DOMAIN}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getDomainsForPrefix - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainsForPrefix&gt;
         &lt;prefix&gt;${TEST_PREFIX}_does_not_exists&lt;/prefix&gt;
      &lt;/psn:getDomainsForPrefix&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getDomainsForPrefixResponse=&quot;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getDomainsForSuffix)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainsForSuffix&gt;
         &lt;suffix&gt;?&lt;/suffix&gt;
      &lt;/psn:getDomainsForSuffix&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getDomainsForSuffix - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainsForSuffix&gt;
         &lt;suffix&gt;${TEST_SUFFIX}&lt;/suffix&gt;
      &lt;/psn:getDomainsForSuffix&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getDomainsForSuffixResponse/return/domain=&quot;${TEST_DOMAIN}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getDomainsForSuffix - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getDomainsForSuffix&gt;
         &lt;suffix&gt;${TEST_SUFFIX}_does_not_exists&lt;/suffix&gt;
      &lt;/psn:getDomainsForSuffix&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getDomainsForSuffixResponse=&quot;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (listDomains)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:listDomains/&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="listDomains - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:listDomains/&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/listDomainsResponse/return</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (listDomainsLight)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:listDomainsLight/&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="listDomainsLight - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:listDomainsLight/&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/listDomainsLightResponse/return</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (listPossibleProperties)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:listPossibleProperties/&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="listPossibleProperties - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:listPossibleProperties/&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/listPossiblePropertiesResponse/return</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (listPseudonymsFor)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:listPseudonymsFor&gt;
         &lt;domain&gt;?&lt;/domain&gt;
      &lt;/psn:listPseudonymsFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="listPseudonymsFor - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:listPseudonymsFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:listPseudonymsFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/listPseudonymsForResponse=&quot;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="listPseudonymsFor - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:listPseudonymsFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}_does_not_exists&lt;/domain&gt;
      &lt;/psn:listPseudonymsFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;${TEST_DOMAIN}_does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (deleteDomain)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:deleteDomain&gt;
         &lt;domain&gt;?&lt;/domain&gt;
      &lt;/psn:deleteDomain&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="deleteDomain - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:deleteDomain&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:deleteDomain&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/deleteDomainResponse=&quot;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="deleteDomain - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:deleteDomain&gt;
         &lt;domain&gt;${TEST_DOMAIN}_does_not_exists&lt;/domain&gt;
      &lt;/psn:deleteDomain&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath does not exists" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;${TEST_DOMAIN}_does_not_exists&apos; not found - can&apos;t be deleted&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="gpasService" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="gpasService - wsdl" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="wsdl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata"></stringProp>
                  <boolProp name="HTTPArgument.use_equals">false</boolProp>
                  <stringProp name="Argument.name">wsdl</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="prepare gpas" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="addDomain - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:addDomain&gt;
         &lt;domainDTO&gt;
            &lt;alphabet&gt;org.emau.icmvc.ganimed.ttp.psn.alphabets.Symbol31&lt;/alphabet&gt;
            &lt;checkDigitClass&gt;org.emau.icmvc.ganimed.ttp.psn.generator.ReedSolomonLagrange&lt;/checkDigitClass&gt;
            &lt;comment&gt;jMeter-Test&lt;/comment&gt;
            &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
            &lt;properties&gt;PSN_PREFIX=${TEST_PREFIX};PSN_SUFFIX=${TEST_SUFFIX};PSN_LENGTH=8;MAX_DETECTED_ERRORS=2;&lt;/properties&gt;
         &lt;/domainDTO&gt;
      &lt;/psn:addDomain&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/addDomainResponse</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="addDomain - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_DOMAINSERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:addDomain&gt;
         &lt;domainDTO&gt;
            &lt;alphabet&gt;org.emau.icmvc.ganimed.ttp.psn.alphabets.Symbol31&lt;/alphabet&gt;
            &lt;checkDigitClass&gt;org.emau.icmvc.ganimed.ttp.psn.generator.ReedSolomonLagrange&lt;/checkDigitClass&gt;
            &lt;comment&gt;jMeter-Test&lt;/comment&gt;
            &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
            &lt;properties&gt;PSN_PREFIX=${TEST_PREFIX}2_;PSN_LENGTH=8;MAX_DETECTED_ERRORS=2;&lt;/properties&gt;
         &lt;/domainDTO&gt;
      &lt;/psn:addDomain&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/addDomainResponse</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getOrCreatePseudonymFor)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getOrCreatePseudonymFor&gt;
         &lt;values&gt;?&lt;/values&gt;
         &lt;domain&gt;?&lt;/domain&gt;
      &lt;/psn:getOrCreatePseudonymFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getOrCreatePseudonymFor - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getOrCreatePseudonymFor&gt;
         &lt;value&gt;${TEST_VALUE_1}&lt;/value&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:getOrCreatePseudonymFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getOrCreatePseudonymForResponse/return</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="extract TEST_PSN_1" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">TEST_PSN_1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">/Envelope/Body/getOrCreatePseudonymForResponse/return</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test TEST_PSN_1" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-263977593">${TEST_PREFIX}.*${TEST_SUFFIX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">TEST_PSN_1</stringProp>
                <stringProp name="Assertion.scope">variable</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getOrCreatePseudonymFor - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getOrCreatePseudonymFor&gt;
         &lt;value&gt;${TEST_PSN_1}&lt;/value&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
      &lt;/psn:getOrCreatePseudonymFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getOrCreatePseudonymForResponse/return</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="extract TEST_PSN_4" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">TEST_PSN_4</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">/Envelope/Body/getOrCreatePseudonymForResponse/return</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test TEST_PSN_4" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-759035330">${TEST_PREFIX}2_.*</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">TEST_PSN_4</stringProp>
                <stringProp name="Assertion.scope">variable</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract TEST_PURE_PSN_4" enabled="true">
                <stringProp name="TestPlan.comments">get TEST_PSN_4 without prefix</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">TEST_PURE_PSN_4</stringProp>
                <stringProp name="RegexExtractor.regex">.*_([^_]*).$</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">TEST_PSN_4</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getOrCreatePseudonymFor - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getOrCreatePseudonymFor&gt;
         &lt;value&gt;${TEST_VALUE_1}&lt;/value&gt;
         &lt;domain&gt;${TEST_DOMAIN}_does_not_exists&lt;/domain&gt;
      &lt;/psn:getOrCreatePseudonymFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath domain not exists" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;${TEST_DOMAIN}_does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getOrCreatePseudonymForList)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getOrCreatePseudonymForList&gt;
         &lt;!--1 or more repetitions:--&gt;
         &lt;values&gt;?&lt;/values&gt;
         &lt;domain&gt;?&lt;/domain&gt;
      &lt;/psn:getOrCreatePseudonymForList&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getOrCreatePseudonymForList - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getOrCreatePseudonymForList&gt;
         &lt;values&gt;${TEST_VALUE_2}&lt;/values&gt;
         &lt;values&gt;${TEST_VALUE_3}&lt;/values&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:getOrCreatePseudonymForList&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">count(/Envelope/Body/getOrCreatePseudonymForListResponse/return/map/entry)=2</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="extract TEST_PSN_2" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">TEST_PSN_2</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">/Envelope/Body/getOrCreatePseudonymForListResponse/return/map/entry/value[../key/text()=&quot;${TEST_VALUE_2}&quot;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test TEST_PSN_2" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-263977593">${TEST_PREFIX}.*${TEST_SUFFIX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">TEST_PSN_2</stringProp>
                <stringProp name="Assertion.scope">variable</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="extract TEST_PSN_3" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">TEST_PSN_3</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">/Envelope/Body/getOrCreatePseudonymForListResponse/return/map/entry/value[../key/text()=&quot;${TEST_VALUE_3}&quot;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test TEST_PSN_3" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-263977593">${TEST_PREFIX}.*${TEST_SUFFIX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable">TEST_PSN_3</stringProp>
                <stringProp name="Assertion.scope">variable</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getOrCreatePseudonymForList - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getOrCreatePseudonymForList&gt;
         &lt;values&gt;${TEST_VALUE_2}&lt;/values&gt;
         &lt;values&gt;${TEST_VALUE_3}&lt;/values&gt;
         &lt;domain&gt;${TEST_DOMAIN}_does_not_exists&lt;/domain&gt;
      &lt;/psn:getOrCreatePseudonymForList&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath domain not exists" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;${TEST_DOMAIN}_does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (anonymiseEntry)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="anonymiseEntry - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:anonymiseEntry&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;value&gt;${TEST_VALUE_3}&lt;/value&gt;
      &lt;/service:anonymiseEntry&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath count" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">count(/Envelope/Body/anonymiseEntryResponse/return)=0</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="anonymiseEntry - not found" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:anonymiseEntry&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;value&gt;does_not_exists&lt;/value&gt;
      &lt;/service:anonymiseEntry&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;pseudonym for value &apos;does_not_exists&apos; not found within domain &apos;${TEST_DOMAIN}&apos;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="anonymiseEntry - domain not exists" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:anonymiseEntry&gt;
         &lt;domain&gt;does_not_exists&lt;/domain&gt;
         &lt;value&gt;${TEST_VALUE_2}&lt;/value&gt;
      &lt;/service:anonymiseEntry&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;pseudonym for value &apos;${TEST_VALUE_2}&apos; not found within domain &apos;does_not_exists&apos;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getPseudonymFor)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getPseudonymFor - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPseudonymFor&gt;
         &lt;value&gt;${TEST_VALUE_1}&lt;/value&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:getPseudonymFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getPseudonymForResponse/return=&quot;${TEST_PSN_1}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getPseudonymFor - not found" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPseudonymFor&gt;
         &lt;value&gt;${TEST_VALUE_3}&lt;/value&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:getPseudonymFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;value &apos;${TEST_VALUE_3}&apos; for domain &apos;${TEST_DOMAIN}&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getPseudonymFor - domain not exists" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPseudonymFor&gt;
         &lt;value&gt;${TEST_VALUE_2}&lt;/value&gt;
         &lt;domain&gt;does_not_exists&lt;/domain&gt;
      &lt;/psn:getPseudonymFor&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;value &apos;${TEST_VALUE_2}&apos; for domain &apos;does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getPseudonymForList)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPseudonymForList&gt;
         &lt;!--1 or more repetitions:--&gt;
         &lt;values&gt;?&lt;/values&gt;
         &lt;domain&gt;?&lt;/domain&gt;
      &lt;/psn:getPseudonymForList&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getPseudonymForList - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPseudonymForList&gt;
         &lt;values&gt;${TEST_VALUE_1}&lt;/values&gt;
         &lt;values&gt;${TEST_VALUE_2}&lt;/values&gt;
         &lt;values&gt;${TEST_VALUE_3}&lt;/values&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:getPseudonymForList&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath TEST_VALUE_1" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getPseudonymForListResponse/return/map/entry/value[../key/text()=&quot;${TEST_VALUE_1}&quot;]/text()=&quot;${TEST_PSN_1}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath TEST_VALUE_2" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getPseudonymForListResponse/return/map/entry/value[../key/text()=&quot;${TEST_VALUE_2}&quot;]/text()=&quot;${TEST_PSN_2}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath TEST_VALUE_3" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getPseudonymForListResponse/return/map/entry/value[../key/text()=&quot;${TEST_VALUE_3}&quot;]/text()=&quot;*** VALUE NOT FOUND ***&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getPseudonymForList - domain not exists" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPseudonymForList&gt;
         &lt;value&gt;${TEST_VALUE_2}&lt;/value&gt;
         &lt;domain&gt;does_not_exists&lt;/domain&gt;
      &lt;/psn:getPseudonymForList&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;value &apos;${TEST_VALUE_2}&apos; for domain &apos;does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getPseudonymForValuePrefix)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getPseudonymForValuePrefix - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPseudonymForValuePrefix&gt;
         &lt;valuePrefix&gt;${TEST_PREFIX}&lt;/valuePrefix&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
      &lt;/psn:getPseudonymForValuePrefix&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath count" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">count(/Envelope/Body/getPseudonymForValuePrefixResponse/return/map/entry)=1</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath TEST_PSN_4" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getPseudonymForValuePrefixResponse/return/map/entry/value[../key/text()=&quot;${TEST_PSN_1}&quot;]/text()=&quot;${TEST_PSN_4}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getPseudonymForValuePrefix - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPseudonymForValuePrefix&gt;
         &lt;valuePrefix&gt;${TEST_PREFIX}&lt;/valuePrefix&gt;
         &lt;domain&gt;does_not_exists&lt;/domain&gt;
      &lt;/psn:getPseudonymForValuePrefix&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath count" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">count(/Envelope/Body/getPseudonymForValuePrefixResponse/return/map/entry)=0</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getPSNTreeForPSN)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getPSNTreeForPSN - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPSNTreeForPSN&gt;
         &lt;psn&gt;${TEST_PSN_4}&lt;/psn&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
      &lt;/psn:getPSNTreeForPSN&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getPSNTreeForPSNResponse/return/pseudonym=&quot;${TEST_PSN_1}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getPSNTreeForPSN - fail" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:getPSNTreeForPSN&gt;
         &lt;psn&gt;${TEST_PSN_4}&lt;/psn&gt;
         &lt;domain&gt;does_not_exists&lt;/domain&gt;
      &lt;/psn:getPSNTreeForPSN&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getValueFor)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psn&gt;${TEST_PSN_1}&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getValueForResponse/return=&quot;${TEST_VALUE_1}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - unknown prefix" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psn&gt;does_not_exists_${TEST_PSN_1}&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;unknown prefix - &apos;${TEST_PREFIX}&apos; expected&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - unknown suffix" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psn&gt;${TEST_PSN_1}_does_not_exists&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;unknown suffix - &apos;${TEST_SUFFIX}&apos; expected&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - no domain" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;does_not_exists&lt;/domain&gt;
         &lt;psn&gt;${TEST_PSN_1}&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - unexpected char" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_${TEST_PURE_PSN_4}_&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;org.emau.icmvc.ganimed.ttp.psn.exceptions.CharNotInAlphabetException: char _ is not an element of this alphabet&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - not in alphabet" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_${TEST_PURE_PSN_4}S&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;org.emau.icmvc.ganimed.ttp.psn.exceptions.CharNotInAlphabetException: char S is not an element of this alphabet&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - invalid length" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_${TEST_PURE_PSN_4}11&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;invalid value &apos;${TEST_PURE_PSN_4}11&apos; - it should have a length of 10&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - invalid check" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_${TEST_PURE_PSN_4}5&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;invalid check digits for &apos;${TEST_PURE_PSN_4}5&apos;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - anonymised" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psn&gt;${TEST_PSN_3}&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;requested value for pseudonym ${TEST_PSN_3} can&apos;t be retrieved - it is anonymised&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueFor - not found" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:getValueFor&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_9JP465DNHX&lt;/psn&gt;
      &lt;/service:getValueFor&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;value for pseudonym &apos;${TEST_PREFIX}2_9JP465DNHX&apos; not found within domain &apos;${TEST_DOMAIN}.2&apos;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (getValueForList)" enabled="false"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueForList - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;

      &lt;service:getValueForList&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_1}&lt;/psnList&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_2}&lt;/psnList&gt;
      &lt;/service:getValueForList&gt;

   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getValueForListResponse/return/map/entry[1]/value=&quot;${TEST_VALUE_1}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getValueForListResponse/return/map/entry[2]/value=&quot;${TEST_VALUE_2}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueForList - empty list" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;

      &lt;service:getValueForList&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/service:getValueForList&gt;

   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getValueForListResponse/return/map/entry</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueForList - no domain" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;

      &lt;service:getValueForList&gt;
         &lt;domain&gt;whatever&lt;/domain&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_1}&lt;/psnList&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_2}&lt;/psnList&gt;
      &lt;/service:getValueForList&gt;

   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;whatever&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueForList - unexpected char" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;

      &lt;service:getValueForList&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_1}&lt;/psnList&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_6}&lt;/psnList&gt;
      &lt;/service:getValueForList&gt;

   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;org.emau.icmvc.ganimed.ttp.psn.exceptions.CharNotInAlphabetException: char _ is not an element of this alphabet&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueForList - not in alphabet" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;

      &lt;service:getValueForList&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_1}&lt;/psnList&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_5}&lt;/psnList&gt;
      &lt;/service:getValueForList&gt;

   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;org.emau.icmvc.ganimed.ttp.psn.exceptions.CharNotInAlphabetException: char S is not an element of this alphabet&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueForList - invalid length" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;

      &lt;service:getValueForList&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_1}&lt;/psnList&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_2}1&lt;/psnList&gt;
      &lt;/service:getValueForList&gt;

   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;invalid value &apos;${TEST_PSN_2}1&apos; - it should have a length of 10&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueForList - invalid check" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;

      &lt;service:getValueForList&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_1}&lt;/psnList&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_7}&lt;/psnList&gt;
      &lt;/service:getValueForList&gt;

   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;invalid check digits for &apos;${TEST_PSN_7}&apos;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="getValueForList - not found" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;

      &lt;service:getValueForList&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_1}&lt;/psnList&gt;
         &lt;psnList&gt;${TEST_PREFIX}${TEST_PSN_4}&lt;/psnList&gt;
      &lt;/service:getValueForList&gt;

   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getValueForListResponse/return/map/entry[1]/value=&quot;${TEST_VALUE_1}&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/getValueForListResponse/return/map/entry[2]/value=&quot;*** PSN NOT FOUND ***&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (insertValuePseudonymPairs)" enabled="false"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="complete request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA"></stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:insertValuePseudonymPairs&gt;
         &lt;pairs&gt;
            &lt;map&gt;
               &lt;!--Zero or more repetitions:--&gt;
               &lt;entry&gt;
                  &lt;!--Optional:--&gt;
                  &lt;key&gt;?&lt;/key&gt;
                  &lt;!--Optional:--&gt;
                  &lt;value&gt;?&lt;/value&gt;
               &lt;/entry&gt;
            &lt;/map&gt;
         &lt;/pairs&gt;
         &lt;domain&gt;?&lt;/domain&gt;
      &lt;/psn:insertValuePseudonymPairs&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="insertValuePseudonymPairs - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:insertValuePseudonymPairs&gt;
         &lt;pairs&gt;
            &lt;map&gt;
               &lt;!--Zero or more repetitions:--&gt;
               &lt;entry&gt;
                  &lt;!--Optional:--&gt;
                  &lt;key&gt;?&lt;/key&gt;
                  &lt;!--Optional:--&gt;
                  &lt;value&gt;?&lt;/value&gt;
               &lt;/entry&gt;
            &lt;/map&gt;
         &lt;/pairs&gt;
         &lt;domain&gt;?&lt;/domain&gt;
      &lt;/psn:insertValuePseudonymPairs&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/insertValuePseudonymPairsResponse/</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="soap (validatePSN)" enabled="true"/>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - ok" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:psn=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;psn:validatePSN&gt;
         &lt;psn&gt;${TEST_PSN_1}&lt;/psn&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
      &lt;/psn:validatePSN&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath not failed" enabled="true">
                <boolProp name="XPath.negate">true</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/validatePSNResponse</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - unknown prefix" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:validatePSN&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psn&gt;does_not_exists_${TEST_PSN_1}&lt;/psn&gt;
      &lt;/service:validatePSN&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;unknown prefix - &apos;${TEST_PREFIX}&apos; expected&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - unknown suffix" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:validatePSN&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psn&gt;${TEST_PSN_1}_does_not_exists&lt;/psn&gt;
      &lt;/service:validatePSN&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;unknown suffix - &apos;${TEST_SUFFIX}&apos; expected&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - no domain" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:validatePSN&gt;
         &lt;domain&gt;does_not_exists&lt;/domain&gt;
         &lt;psn&gt;${TEST_PSN_1}&lt;/psn&gt;
      &lt;/service:validatePSN&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;psn-project for domain &apos;does_not_exists&apos; not found&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - unexpected char" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:validatePSN&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_${TEST_PURE_PSN_4}_&lt;/psn&gt;
      &lt;/service:validatePSN&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;org.emau.icmvc.ganimed.ttp.psn.exceptions.CharNotInAlphabetException: char _ is not an element of this alphabet&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - not in alphabet" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:validatePSN&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_${TEST_PURE_PSN_4}S&lt;/psn&gt;
      &lt;/service:validatePSN&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;org.emau.icmvc.ganimed.ttp.psn.exceptions.CharNotInAlphabetException: char S is not an element of this alphabet&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - invalid length" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:validatePSN&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_${TEST_PURE_PSN_4}11&lt;/psn&gt;
      &lt;/service:validatePSN&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;invalid value &apos;${TEST_PURE_PSN_4}11&apos; - it should have a length of 10&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - invalid check" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:validatePSN&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_${TEST_PURE_PSN_4}5&lt;/psn&gt;
      &lt;/service:validatePSN&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;invalid check digits for &apos;${TEST_PURE_PSN_4}5&apos;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - anonymised" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:validatePSN&gt;
         &lt;domain&gt;${TEST_DOMAIN}&lt;/domain&gt;
         &lt;psn&gt;${TEST_PSN_3}&lt;/psn&gt;
      &lt;/service:validatePSN&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;requested value for pseudonym ${TEST_PSN_3} can&apos;t be retrieved - it is anonymised&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="validatePSN - not found" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${PROTOCOL}://${HOST}:${PORT}/${GPAS_CONTEXT}/${GPAS_SERVICE}</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:service=&quot;http://psn.ttp.ganimed.icmvc.emau.org/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;service:validatePSN&gt;
         &lt;domain&gt;${TEST_DOMAIN}.2&lt;/domain&gt;
         &lt;psn&gt;${TEST_PREFIX}2_9JP465DNHX&lt;/psn&gt;
      &lt;/service:validatePSN&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode500" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="52469">500</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="test isXML" enabled="true"/>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="test xPath return" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">/Envelope/Body/Fault/faultstring=&quot;value for pseudonym &apos;${TEST_PREFIX}2_9JP465DNHX&apos; not found within domain &apos;${TEST_DOMAIN}.2&apos;&quot;</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="clear gpas-db" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="set db-connection" enabled="true">
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="checkQuery">SELECT 1</stringProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="dataSource">PSN_DB</stringProp>
              <stringProp name="dbUrl">${DB_URL}</stringProp>
              <stringProp name="driver">${DB_DRIVER}</stringProp>
              <boolProp name="keepAlive">false</boolProp>
              <stringProp name="password">${DB_PASS}</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <stringProp name="username">${DB_USER}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="remove test-psn&apos;s" enabled="true">
              <stringProp name="dataSource">PSN_DB</stringProp>
              <stringProp name="query">DELETE
 FROM `psn`
 WHERE
  `domain` = &apos;${TEST_DOMAIN}&apos;
 OR
  `domain` = &apos;${TEST_DOMAIN}.2&apos;
 OR
  `originalValue` LIKE &apos;${TEST_DOMAIN}_#*#_${TEST_PREFIX}%_${TEST_SUFFIX}&apos;
;

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-810460602">[3-6] updates</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="remove test-domain" enabled="true">
              <stringProp name="dataSource">PSN_DB</stringProp>
              <stringProp name="query">DELETE
 FROM `psn_projects`
 WHERE `domain` = &apos;${TEST_DOMAIN}&apos; OR `domain` = &apos;${TEST_DOMAIN}.2&apos;
;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test StatusCode200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="test " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-477484324">2 updates</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
